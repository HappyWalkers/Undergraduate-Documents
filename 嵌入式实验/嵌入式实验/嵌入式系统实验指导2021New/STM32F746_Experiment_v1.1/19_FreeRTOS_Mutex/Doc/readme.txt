/**
  ********************************************************************
  * @experiment  FreeRTOS_Mutex
  * @author      Li ZuGeng
  * @version     V1.0.0
  * @date        2015-12-21
  * @brief       Description of the FreeRTOS_Mutex example
  ********************************************************************
  *
  * 本实验例程包含源文件：main.c, stm32f7xx_it.c
  *
  * 本实验演示FreeRTOS系统中使用互斥信号量对临界区资源进行加锁，实现资源独享的过程
  * 
  * 系统初始化结束后，超级终端显示System initialize success
  *
  *
  * 程序中创建了优先级分别为高、中、低三个级别的线程：
  *
  *
  * 高优先级的线程在程序运行后立即获得互斥信号量，短暂的等待后高优先级的线程将互斥
  *
  * 信号量释放，在将LED1的状态取反后立即挂起自己。
  *
  *
  * 中优先级的线程用阻塞方式一直等待互斥信号量的释放，中优先级的线程获得互斥信号量
  *
  * 后立即查询高优先级的线程是否挂起，在查询到高优先级线程挂起前，中优先级的线程向
  * 
  * 串口打印“MutexMeduimPriorityThread is running”，当查询到高优先级线程挂起后，中
  *
  * 优先级任的线程也挂起自己，这时中优先级和高优先级线程都已挂起。
  *
  *
  * 低优先级线程也是使用阻塞方式一直等待互斥信号量的释放，低优先级的线程获得互斥信
  *
  * 号量后立即查询高和中优先级的线程是否挂起，在查询到高和中优先级任务挂起前，向串
  *
  * 口打印“LowMeduimPriorityThread is running”，并唤醒高和中优先级任务，但此时互斥
  * 
  * 信号量被低优先级的线程占用，高和中优先级任务会被阻塞，直至低优先级任务释放互斥
  *
  * 信号量。
  *
  */