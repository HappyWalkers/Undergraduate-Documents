///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        04/Jun/2021  11:36:54 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ µ—È÷∏µº È\ µ—Èœ‰ µ /
//                          —È-Linux∆ΩÃ®∆™\Code\Cap1_Basic\Ex04_PC_UART\Sourc /
//                          e\UART.c                                          /
//    Command line       =  -f E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ µ—È÷∏µº È\ µ—Èœ /
//                          ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap2_ZStack\ZStack-CC2530- /
//                          r200\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8 /
//                          wCoord.cfg (-DCPU32MHZ -DROOT=__near_func         /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ µ—È÷∏µº È\ µ—Èœ /
//                          ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap2_ZStack\ZStack-CC2530- /
//                          r200\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8 /
//                          wConfig.cfg (-DZIGBEEPRO -DSECURE=0               /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x4327                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û— /
//                          ß£©\ µ—È÷∏µº È\ µ—Èœ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap1_B /
//                          asic\Ex04_PC_UART\Source\UART.c -D ZTOOL_P1 -D    /
//                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          /
//                          SAPP_ZSTACK -lC E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ µ— /
//                          È÷∏µº È\ µ—Èœ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap2_ZStack\Z /
//                          Stack-CC2530-r200\Projects\SappWsn\CoordinatorEB\ /
//                          List\ -lA E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ µ—È÷∏µº  /
//                          È\ µ—Èœ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap2_ZStack\ZStack- /
//                          CC2530-r200\Projects\SappWsn\CoordinatorEB\List\  /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ µ—È÷∏µº È\ µ—Èœ‰ µ /
//                          —È-Linux∆ΩÃ®∆™\Code\Cap2_ZStack\ZStack-CC2530-r20 /
//                          0\Projects\SappWsn\CoordinatorEB\Obj\ -e          /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ µ—È÷∏µº È\ µ—Èœ‰ µ /
//                          —È-Linux∆ΩÃ®∆™\Code\Cap2_ZStack\ZStack-CC2530-r20 /
//                          0\Projects\SappWsn\ -I E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û— /
//                          ß£©\ µ—È÷∏µº È\ µ—Èœ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap2_Z /
//                          Stack\ZStack-CC2530-r200\Projects\SappWsn\Source\ /
//                           -I E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ µ—È÷∏µº È\ µ—È /
//                          œ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap2_ZStack\ZStack-CC2530 /
//                          -r200\Projects\SappWsn\..\zstack\ZMain\TI2530DB\  /
//                          -I E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ µ—È÷∏µº È\ µ—Èœ /
//                          ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap2_ZStack\ZStack-CC2530- /
//                          r200\Projects\SappWsn\..\..\Components\hal\includ /
//                          e\ -I E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ µ—È÷∏µº È\ µ /
//                          —Èœ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap2_ZStack\ZStack-CC25 /
//                          30-r200\Projects\SappWsn\..\..\Components\hal\tar /
//                          get\CC2530EB\ -I E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ µ /
//                          —È÷∏µº È\ µ—Èœ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap2_ZStack\ /
//                          ZStack-CC2530-r200\Projects\SappWsn\..\..\Compone /
//                          nts\mac\include\ -I E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£© /
//                          \ µ—È÷∏µº È\ µ—Èœ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap2_ZSta /
//                          ck\ZStack-CC2530-r200\Projects\SappWsn\..\..\Comp /
//                          onents\mac\high_level\ -I                         /
//                          E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ µ—È÷∏µº È\ µ—Èœ‰ µ /
//                          —È-Linux∆ΩÃ®∆™\Code\Cap2_ZStack\ZStack-CC2530-r20 /
//                          0\Projects\SappWsn\..\..\Components\mac\low_level /
//                          \srf04\ -I E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ µ—È÷∏µº /
//                           È\ µ—Èœ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap2_ZStack\ZStack /
//                          -CC2530-r200\Projects\SappWsn\..\..\Components\ma /
//                          c\low_level\srf04\single_chip\ -I                 /
//                          E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ µ—È÷∏µº È\ µ—Èœ‰ µ /
//                          —È-Linux∆ΩÃ®∆™\Code\Cap2_ZStack\ZStack-CC2530-r20 /
//                          0\Projects\SappWsn\..\..\Components\mt\ -I        /
//                          E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ µ—È÷∏µº È\ µ—Èœ‰ µ /
//                          —È-Linux∆ΩÃ®∆™\Code\Cap2_ZStack\ZStack-CC2530-r20 /
//                          0\Projects\SappWsn\..\..\Components\osal\include\ /
//                           -I E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ µ—È÷∏µº È\ µ—È /
//                          œ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap2_ZStack\ZStack-CC2530 /
//                          -r200\Projects\SappWsn\..\..\Components\services\ /
//                          saddr\ -I E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ µ—È÷∏µº  /
//                          È\ µ—Èœ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap2_ZStack\ZStack- /
//                          CC2530-r200\Projects\SappWsn\..\..\Components\ser /
//                          vices\sdata\ -I E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ µ— /
//                          È÷∏µº È\ µ—Èœ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap2_ZStack\Z /
//                          Stack-CC2530-r200\Projects\SappWsn\..\..\Componen /
//                          ts\stack\af\ -I E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ µ— /
//                          È÷∏µº È\ µ—Èœ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap2_ZStack\Z /
//                          Stack-CC2530-r200\Projects\SappWsn\..\..\Componen /
//                          ts\stack\nwk\ -I E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ µ /
//                          —È÷∏µº È\ µ—Èœ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap2_ZStack\ /
//                          ZStack-CC2530-r200\Projects\SappWsn\..\..\Compone /
//                          nts\stack\sapi\ -I E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ /
//                           µ—È÷∏µº È\ µ—Èœ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap2_ZStac /
//                          k\ZStack-CC2530-r200\Projects\SappWsn\..\..\Compo /
//                          nents\stack\sec\ -I E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£© /
//                          \ µ—È÷∏µº È\ µ—Èœ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap2_ZSta /
//                          ck\ZStack-CC2530-r200\Projects\SappWsn\..\..\Comp /
//                          onents\stack\sys\ -I E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£ /
//                          ©\ µ—È÷∏µº È\ µ—Èœ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap2_ZSt /
//                          ack\ZStack-CC2530-r200\Projects\SappWsn\..\..\Com /
//                          ponents\stack\zdo\ -I E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß /
//                          £©\ µ—È÷∏µº È\ µ—Èœ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap2_ZS /
//                          tack\ZStack-CC2530-r200\Projects\SappWsn\..\..\Co /
//                          mponents\zmac\ -I E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\  /
//                          µ—È÷∏µº È\ µ—Èœ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap2_ZStack /
//                          \ZStack-CC2530-r200\Projects\SappWsn\..\..\Compon /
//                          ents\zmac\f8w\ -Ohz --require_prototypes          /
//    List file          =  E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ µ—È÷∏µº È\ µ—Èœ‰ µ /
//                          —È-Linux∆ΩÃ®∆™\Code\Cap2_ZStack\ZStack-CC2530-r20 /
//                          0\Projects\SappWsn\CoordinatorEB\List\UART.s51    /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME UART

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_L
        EXTERN ?L_DIV_MOD
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?US_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??UART0_Dis_fNum?relay
        FUNCTION ??UART0_Dis_fNum?relay,0203H
        PUBLIC ??UART0_Dis_uNum?relay
        FUNCTION ??UART0_Dis_uNum?relay,0203H
        PUBLIC ??UART0_Init?relay
        FUNCTION ??UART0_Init?relay,0203H
        PUBLIC ??UART0_Send?relay
        FUNCTION ??UART0_Send?relay,0203H
        PUBWEAK CLKCONCMD
        PUBWEAK P0SEL
        PUBWEAK PERCFG
        PUBWEAK SLEEPCMD
        PUBWEAK SLEEPSTA
        PUBWEAK U0BAUD
        PUBWEAK U0CSR
        PUBWEAK U0DBUF
        PUBWEAK U0GCR
        PUBLIC UART0_Dis_fNum
        FUNCTION UART0_Dis_fNum,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC UART0_Dis_uNum
        FUNCTION UART0_Dis_uNum,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC UART0_Init
        FUNCTION UART0_Init,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC UART0_Send
        FUNCTION UART0_Send,0203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK _A_IEN0
        PUBWEAK _A_IRCON2
        PUBWEAK __Constant_186a0
        PUBWEAK __Constant_2710
        PUBWEAK __Constant_42c80000
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
UART0_Dis_fNum      SYMBOL "UART0_Dis_fNum"
??UART0_Dis_fNum?relay SYMBOL "?relay", UART0_Dis_fNum
UART0_Dis_uNum      SYMBOL "UART0_Dis_uNum"
??UART0_Dis_uNum?relay SYMBOL "?relay", UART0_Dis_uNum
UART0_Init          SYMBOL "UART0_Init"
??UART0_Init?relay  SYMBOL "?relay", UART0_Init
UART0_Send          SYMBOL "UART0_Send"
??UART0_Send?relay  SYMBOL "?relay", UART0_Send

// E:\π‚≈Ã◊ ¡œV1.2.0£®÷–ƒœ¥Û—ß£©\ µ—È÷∏µº È\ µ—Èœ‰ µ—È-Linux∆ΩÃ®∆™\Code\Cap1_Basic\Ex04_PC_UART\Source\UART.c
//    1 #include "UART.h"

        ASEGN SFR_AN:DATA:NOROOT,086H
// unsigned char volatile __sfr U0CSR
U0CSR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09dH
// unsigned char volatile __sfr SLEEPSTA
SLEEPSTA:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0beH
// unsigned char volatile __sfr SLEEPCMD
SLEEPCMD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c1H
// unsigned char volatile __sfr U0DBUF
U0DBUF:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c2H
// unsigned char volatile __sfr U0BAUD
U0BAUD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c5H
// unsigned char volatile __sfr U0GCR
U0GCR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c6H
// unsigned char volatile __sfr CLKCONCMD
CLKCONCMD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e8H
// union <unnamed> volatile __sfr _A_IRCON2
_A_IRCON2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f1H
// unsigned char volatile __sfr PERCFG
PERCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1
//    2 
//    3 /***********************************************************
//    4 **  ∫Ø ˝√˚≥∆: UART0_Init
//    5 **   µœ÷π¶ƒ‹: ≥ı ºªØ UART0
//    6 **  »Îø⁄≤Œ ˝: baud:≤®Ãÿ¬ …Ë÷√;
//    7 **  ∑µªÿΩ·π˚: None
//    8 ***********************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//    9 void UART0_Init(BaudSel baud)
UART0_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function UART0_Init
        CODE
//   10 {
        ; Saved register size: 0
        ; Auto size: 0
//   11   CLKCONCMD &= ~0X40;             //æß’Ò
        ANL     0xc6,#0xbf
//   12   while(!(SLEEPSTA & 0X40))
??UART0_Init_0:
        MOV     A,0x9d
        MOV     C,0xE0 /* A   */.6
        JNC     ??UART0_Init_0
//   13     ;                             //µ»¥˝æß’ÒŒ»∂®
//   14   CLKCONCMD &= ~0X47;             //TICHSPD128∑÷∆µ£¨CLKSPD≤ª∑÷∆µ
        ANL     0xc6,#0xb8
//   15   SLEEPCMD |= 0X04; 		  //πÿ±’≤ª”√µƒRC’Òµ¥∆˜
        ORL     0xbe,#0x4
//   16 
//   17   PERCFG = 0X00;		  //Œª÷√1 P0ø⁄
        MOV     0xf1,#0x0
//   18   P0SEL |= 0X0C;		  //P0”√◊˜¥Æø⁄
        ORL     0xf3,#0xc
//   19 
//   20   U0CSR |= 0X80;		  //UART∑Ω Ω
        ORL     0x86,#0x80
//   21   switch(baud)
        MOV     A,R1
        JZ      ??UART0_Init_1
        DEC     A
        JZ      ??UART0_Init_2
        DEC     A
        JZ      ??UART0_Init_3
        DEC     A
        JZ      ??UART0_Init_4
        DEC     A
        JZ      ??UART0_Init_5
        DEC     A
        JZ      ??UART0_Init_6
        DEC     A
        JZ      ??UART0_Init_7
        DEC     A
        JZ      ??UART0_Init_8
        DEC     A
        JZ      ??UART0_Init_9
        DEC     A
        JZ      ??UART0_Init_10
        DEC     A
        JZ      ??UART0_Init_11
        SJMP    ??UART0_Init_10
//   22   {
//   23     case BAUD_2400:      U0GCR |= 6;     U0BAUD |= 59;    break;
??UART0_Init_1:
        ORL     0xc5,#0x6
??UART0_Init_12:
        ORL     0xc2,#0x3b
        SJMP    ??UART0_Init_13
//   24     case BAUD_4800:      U0GCR |= 7;     U0BAUD |= 59;    break;
??UART0_Init_2:
        ORL     0xc5,#0x7
        SJMP    ??UART0_Init_12
//   25     case BAUD_9600:      U0GCR |= 8;     U0BAUD |= 59;    break;
??UART0_Init_3:
        ORL     0xc5,#0x8
        SJMP    ??UART0_Init_12
//   26     case BAUD_14400:     U0GCR |= 8;     U0BAUD |= 216;   break;
??UART0_Init_4:
        ORL     0xc5,#0x8
        SJMP    ??UART0_Init_14
//   27     case BAUD_19200:     U0GCR |= 9;     U0BAUD |= 59;    break;
??UART0_Init_5:
        ORL     0xc5,#0x9
        SJMP    ??UART0_Init_12
//   28     case BAUD_28800:     U0GCR |= 9;     U0BAUD |= 216;   break;
??UART0_Init_6:
        ORL     0xc5,#0x9
        SJMP    ??UART0_Init_14
//   29     case BAUD_38400:     U0GCR |= 10;    U0BAUD |= 59;    break;
??UART0_Init_7:
        ORL     0xc5,#0xa
        SJMP    ??UART0_Init_12
//   30     case BAUD_57600:     U0GCR |= 10;    U0BAUD |= 216;   break;
??UART0_Init_8:
        ORL     0xc5,#0xa
        SJMP    ??UART0_Init_14
//   31     case BAUD_76800:     U0GCR |= 11;    U0BAUD |= 59;    break;
??UART0_Init_9:
        ORL     0xc5,#0xb
        SJMP    ??UART0_Init_12
//   32     case BAUD_115200:    U0GCR |= 11;    U0BAUD |= 216;   break;
//   33     case BAUD_230400:    U0GCR |= 12;    U0BAUD |= 216;   break;
??UART0_Init_11:
        ORL     0xc5,#0xc
        SJMP    ??UART0_Init_14
//   34     default         :    U0GCR |= 11;    U0BAUD |= 216;   break; //BAUD_115200;
??UART0_Init_10:
        ORL     0xc5,#0xb
??UART0_Init_14:
        ORL     0xc2,#0xd8
//   35   }
//   36 
//   37   UTX0IF = 0;
??UART0_Init_13:
        CLR     0xe8.1
//   38   U0CSR |= 0X40;		  //‘ –ÌΩ” ’
        ORL     0x86,#0x40
//   39   IEN0 |= 0X84;			  //ø™◊‹÷–∂œ£¨Ω” ’÷–∂œ
        ORL     0xa8,#0x84
//   40 
//   41 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
        REQUIRE CLKCONCMD
        REQUIRE SLEEPSTA
        REQUIRE SLEEPCMD
        REQUIRE PERCFG
        REQUIRE P0SEL
        REQUIRE U0CSR
        REQUIRE U0GCR
        REQUIRE U0BAUD
        REQUIRE _A_IRCON2
        REQUIRE _A_IEN0
//   42 
//   43 /***********************************************************
//   44 **  ∫Ø ˝√˚≥∆: UART0_Send
//   45 **   µœ÷π¶ƒ‹: UART0 ∑¢ÀÕ ˝æ›
//   46 **  »Îø⁄≤Œ ˝: Data:¥˝∑¢ÀÕ ˝æ›«¯ ◊µÿ÷∑
//   47 **            len:¥˝∑¢ÀÕ ˝æ›µƒ◊÷Ω⁄ ˝
//   48 **  ∑µªÿΩ·π˚: None
//   49 ***********************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   50 void UART0_Send(char *Data,int len)
UART0_Send:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function UART0_Send
        CODE
//   51 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//   52   int i;
//   53   for(i=0;i<len;i++)
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??UART0_Send_0
//   54   {
//   55     U0DBUF = *Data++;
??UART0_Send_1:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     0xc1,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//   56     while(UTX0IF == 0)
??UART0_Send_2:
        MOV     C,0xe8.1
        JNC     ??UART0_Send_2
//   57       ;
//   58     UTX0IF = 0;
        CLR     0xe8.1
//   59   }
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??UART0_Send_0:
        CLR     C
        MOV     A,R0
        SUBB    A,R4
        MOV     A,R1
        SUBB    A,R5
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??UART0_Send_1
//   60 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
        REQUIRE U0DBUF
        REQUIRE _A_IRCON2
//   61 /***********************************************************
//   62 **  ∫Ø ˝√˚≥∆: UART0_Dis_uNum
//   63 **   µœ÷π¶ƒ‹: UART0 “‘ ÆΩ¯÷∆∑Ω Ωœ‘ æ uint16 –Õ ˝æ›
//   64 **  »Îø⁄≤Œ ˝: uValue:–Ë“™œ‘ æµƒŒﬁ∑˚∫≈–Õ ˝æ›
//   65 **  ∑µªÿΩ·π˚: None
//   66 ***********************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   67 void UART0_Dis_uNum(uint16 uValue )
UART0_Dis_uNum:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function UART0_Dis_uNum
        CODE
//   68 {
        FUNCALL UART0_Dis_uNum, UART0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UART0_Dis_uNum, UART0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UART0_Dis_uNum, UART0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//   69   uint8 i;
//   70   char cData[5] = {'0','0','0','0','0'};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {48, 48, 48, 48, 48}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {48, 48, 48, 48, 48}>` & 0xff
        MOV     A,#0x5
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//   71 
//   72   cData[0] = uValue % 100000 / 10000 + '0';
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     DPTR,#__Constant_186a0
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_DIV_MOD
        MOV     DPTR,#__Constant_2710
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_DIV_MOD
        MOV     A,?V0 + 0
        LCALL   ?Subroutine1 & 0xFFFF
//   73   cData[1] = uValue % 10000 / 1000 + '0';
??CrossCallReturnLabel_0:
        MOV     R2,#0x10
        MOV     R3,#0x27
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine5 & 0xFFFF
//   74   cData[2] = uValue % 1000 / 100 + '0';
??CrossCallReturnLabel_8:
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine3 & 0xFFFF
//   75   cData[3] = uValue % 100 / 10 + '0';
??CrossCallReturnLabel_4:
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine4 & 0xFFFF
//   76   cData[4] = uValue % 10 / 1 + '0';
??CrossCallReturnLabel_6:
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//   77   if(0 != uValue )
        MOV     A,R6
        ORL     A,R7
        JZ      ??UART0_Dis_uNum_0
//   78   {
//   79     for( i=0; i<5; i++)
        MOV     R0,#0x0
//   80     {
//   81       if('0' != cData[i] )
??UART0_Dis_uNum_1:
        MOV     ?V0 + 0,R0
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_2:
        MOVX    A,@DPTR
        XRL     A,#0x30
        JNZ     ??UART0_Dis_uNum_2
//   82         break;
//   83       if('0' == cData[i] )
//   84         cData[i] = ' ';
        LCALL   ?Subroutine2 & 0xFFFF
//   85     }
??CrossCallReturnLabel_3:
        MOV     A,#0x20
        MOVX    @DPTR,A
        INC     R0
        MOV     A,R0
        CLR     C
        SUBB    A,#0x5
        JNC     ??UART0_Dis_uNum_2
        SJMP    ??UART0_Dis_uNum_1
//   86   }
//   87   else if(0 == uValue )
//   88   {
//   89     for( i=0; i<4; i++)
//   90     {
//   91         cData[i] = ' ';
??UART0_Dis_uNum_0:
        MOV     A,#0x20
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#0x4
??UART0_Dis_uNum_3:
        MOVX    @DPTR,A
        INC     DPTR
        DJNZ    R0,??UART0_Dis_uNum_3
        CFI EndBlock cfiBlock2
//   92     }
//   93   }
//   94   // ˝◊÷∫Õ∆‰À˚ ‰≥ˆƒ⁄»›«∞∫Û∂º”–“ª∏ˆø’∏Òº‰æ‡
//   95   UART0_Send(" ", 1);
??UART0_Dis_uNum_2:
        ; Setup parameters for call to function UART0_Send
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//   96   UART0_Send(cData, 5);
//   97   UART0_Send(" ", 1);
//   98 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#`?<Constant " ">` & 0xff
        MOV     R3,#(`?<Constant " ">` >> 8) & 0xff
        LCALL   ??UART0_Send?relay
        ; Setup parameters for call to function UART0_Send
        ; Setup parameters for call to function UART0_Send
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??UART0_Send?relay
        ; Setup parameters for call to function UART0_Send
        ; Setup parameters for call to function UART0_Send
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#`?<Constant " ">` & 0xff
        MOV     R3,#(`?<Constant " ">` >> 8) & 0xff
        LCALL   ??UART0_Send?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6
//   99 
//  100 /***********************************************************
//  101 **  ∫Ø ˝√˚≥∆: UART0_Dis_fNum
//  102 **   µœ÷π¶ƒ‹: UART0 “‘ ÆΩ¯÷∆∑Ω Ωœ‘ æ float –Õ ˝æ›
//  103 **  »Îø⁄≤Œ ˝: fValue:–Ë“™œ‘ æµƒ∏°µ„–Õ ˝æ›
//  104 **  ∑µªÿΩ·π˚: None
//  105 ***********************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  106 void UART0_Dis_fNum(float fValue )
UART0_Dis_fNum:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function UART0_Dis_fNum
        CODE
//  107 {
        FUNCALL UART0_Dis_fNum, UART0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UART0_Dis_fNum, UART0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UART0_Dis_fNum, UART0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  108   uint16 uValue = (uint16)( 100 * fValue );
        MOV     DPTR,#__Constant_42c80000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  109   char cData[5] = {'0','0','.','0','0'};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {48, 48, 46, 48, 48}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {48, 48, 46, 48, 48}>` & 0xff
        MOV     A,#0x5
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  110 
//  111   cData[0] = uValue % 10000 / 1000 + '0';
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     R2,#0x10
        MOV     R3,#0x27
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        LCALL   ?Subroutine1 & 0xFFFF
//  112   cData[1] = uValue % 1000 / 100 + '0';
??CrossCallReturnLabel_1:
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  113   cData[2] = '.';
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2e
        LCALL   ?Subroutine3 & 0xFFFF
//  114   cData[3] = uValue % 100 / 10 + '0';
??CrossCallReturnLabel_5:
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine4 & 0xFFFF
//  115   cData[4] = uValue % 10 / 1 + '0';
??CrossCallReturnLabel_7:
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  116 
//  117   // ˝◊÷∫Õ∆‰À˚ ‰≥ˆƒ⁄»›«∞∫Û∂º”–“ª∏ˆø’∏Òº‰æ‡
//  118   UART0_Send(" ", 1);
        ; Setup parameters for call to function UART0_Send
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock7
//  119   UART0_Send(cData, 5);
//  120   UART0_Send(" ", 1);
//  121 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     R2,#0xa
        MOV     R3,#0x0
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     R2,#0x64
        MOV     R3,#0x0
        RET
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        ADD     A,#0x30
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_11:
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_9, ??CrossCallReturnLabel_6
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_9, ??CrossCallReturnLabel_7
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_10, ??CrossCallReturnLabel_4
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_10, ??CrossCallReturnLabel_5
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_11, ??CrossCallReturnLabel_0
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_11, ??CrossCallReturnLabel_1
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        MOVX    @DPTR,A
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??UART0_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    UART0_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??UART0_Send?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    UART0_Send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??UART0_Dis_uNum?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    UART0_Dis_uNum

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??UART0_Dis_fNum?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    UART0_Dis_fNum

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {48, 48, 48, 48, 48}>`:
        DB 48
        DB 48
        DB 48
        DB 48
        DB 48

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant " ">`:
        DB " "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {48, 48, 46, 48, 48}>`:
        DB 48
        DB 48
        DB 46
        DB 48
        DB 48

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_186a0:
        DD 100000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2710:
        DD 10000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_42c80000:
        DD 42C80000H

        END
//  122 
//  123 /***********************************************************
//  124 **  ∫Ø ˝√˚≥∆: UART0_ISR
//  125 **   µœ÷π¶ƒ‹: UART0 Ω” ’÷–∂œ¥¶¿Ì∫Ø ˝
//  126 **  »Îø⁄≤Œ ˝: None
//  127 **  ∑µªÿΩ·π˚: None
//  128 ***********************************************************/
//  129 
// 
// 697 bytes in segment BANKED_CODE
//  24 bytes in segment BANK_RELAYS
//  11 bytes in segment SFR_AN
//  24 bytes in segment XDATA_ROM_C
// 
// 721 bytes of CODE  memory
//  12 bytes of CONST memory (+ 12 bytes shared)
//   0 bytes of DATA  memory (+ 11 bytes shared)
//
//Errors: none
//Warnings: none
